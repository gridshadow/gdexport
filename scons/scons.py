# SPDX-FileCopyrightText: 2025 Gridshadows Gaming <https://www.gridshadows.co.uk>
# SPDX-License-Identifier: Zlib

"""
Module to generate the export interface for a GDExtension from the C++ source
files during an SCons build.

In order to successfully run, it requires a built version of the
[`godot-cpp` Git repository](https://github.com/godotengine/godot-cpp) and
a recent Clang version (tested with Clang 19)

See README.md for details on the attributes necessary for the export.
"""

__author__ = "Gridshadows Gaming"
__copyright__ = "Copyright 2025 Gridshadows Gaming"
__license__ = "ZLib"
__version__ = "0.1.0"
__status__ = "Development"

from .. import gdexport
from SCons.Builder import Builder
import pathlib

def configure_generate(env,
                       name           : str,
                       files          : list[str],
                       godot          : str|None       = None,
                       clang          : str            = "clang",
                       sysincludes    : list[str]|None = None,
                       includes       : list[str]      = [],
                       destination    : str|None       = None,
                       documentation  : str|None       = None,
                       args           : list[str]      = []):
    """
    Create SCon builders and add build steps to generate C++ files to perform the necessary export
    for GDExension for the specified C++ header files.

    :param: SCons.Environment env: The SCons environment to add the builders to
    :param str name:               Name of the GDExtension. Used for generating
                                   the "entry_symbol" function name (`<name>_library_init`)
                                   and the name of the generated C++ file for the
                                   entry point (`<name>.lib.cpp`).
                                   Must be a valid C++ identifier
    :param list[str] files:        List of C++ header files to process to export
                                   Godot classes from
    :param str|None  godot:        Path to the root of the checkout of the `godot-cpp` repo
                                   Default is `None` to indicate not to automatically deduce godot include paths
    :param str       clang:        Path to the clang executable
                                   (default = `clang` in PATH)
    :param list[str] sysincludes:  List of paths to treat as system include directories;
                                   i.e., `-isystem` paths to Clang.
                                   If `None` (the default), this is populated instad with `env[CPPPATH]`;
                                   i.e, include headers paths specified previously for the build
    :param list[str] includes:     List of paths to treat as normal include directories;
                                   i.e., `-I` paths to Clang
    :param str|None destination:   Output directory for generated files.
                                   (default = current working directory)
    :param str|None documentation: Specify whether to also extract Doxygen style
                                   comments from the C++ source and generate the
                                   Godot XML documentation for the extension.
                                   Specify `None` to not generate documentation,
                                   `""` (empty string) to generate in default
                                   location (`doc_classes` in current working),
                                   or path to directory to generate in otherwise
    :param list[str] args:         List of extra command line arguments to pass to clang

    :raises ValueError:         If name is not a valid C++ identifier (valid identifier
                                contains only [a-zA-Z0-9_] and cannot start with a number)
    :raises ValueError:         If no files are specified, or a specified file does not exist
    :raises FileExistsError:    If `destination` or `documentation` folder does not exist,
                                and `create_folders` is `False`
    :raises NotADirectoryError: If `destination` or `documentation` folder is a file
    :raises OSError:            If `destination` or `documentation` folder does not exist,
                                `create_folders` is `True` and the folder creation
                                failed; i.e., the error raised by `os.makedirs`
    :raises subprocess.CalledProcessError: if an error occurs when calling `clang` (compiler error etc.),
                                or if the return from `clang --version` is invalid
                                (unable to deduce version number)

    :returns: List of source files which will be generated by the builders (to add to the sources
              for the extension as dependency).
    """
    import copy
    # Deepcopy lists because we pass them to lambdas
    if sysincludes is None:
        sysincludes = copy.copy(env["CPPPATH"])
    else:
        sysincludes = copy.copy(sysincludes)
    if includes is not None:
        includes = copy.deepcopy(includes)
    if args is not None:
        args = copy.deepcopy(args)

    doc_emitter = None
    if documentation == "":
        documentation = "doc_classes"
    if documentation and (env["target"] in ["editor", "template_debug"]):
        def doc_emitter_func(env, target, source):
            target += gdexport.list_doc_files(source, godot, clang, sysincludes,
                                              includes, documentation, args)
            return target,source
        doc_emitter = doc_emitter_func

    def gdexport_entry_point(env,target,source):
        gdexport.entry_point(name, source, target[0])

    def gdexport_export_header(env,target,source):
        gdexport.export_header(source[0], output=target[0], godot=godot, clang=clang,
                               sysincludes=sysincludes, includes=includes,
                               documentation=documentation, create_folders=True, args=args)

    env.Append(BUILDERS={
        "GDExportEntryPoint" : Builder(action=gdexport_entry_point),
        "GDExportHeader" : Builder(action=gdexport_export_header,
                                   suffix='.gen.cpp', src_suffix='.hpp', emitter=doc_emitter)
    })

    if destination:
        dest = pathlib.Path(str(destination))
    else:
        dest = pathlib.Path()

    if documentation and (env["target"] in ["editor", "template_debug"]):
        sources = []
        docs = []
        for x in files:
            path = pathlib.Path(str(x))
            headers = env.GDExportHeader(dest/path.stem, source=x)
            sources.append(headers[0])
            docs += headers[1:]
        if docs:
            sources += env.GodotCPPDocData(dest/(name+".doc.cpp"), source=docs)
    else:
        sources = [env.GDExportHeader(dest/pathlib.Path(str(x)).stem, source=x) for x in files]
    sources += env.GDExportEntryPoint(dest/(name+'.lib.cpp'), source=files)
    return sources
